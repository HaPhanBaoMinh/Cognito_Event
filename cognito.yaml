Parameters:
  UserPoolName:
    Type: String
    Default: "user-pool"

  TableName:
    Type: String
    Default: "user-metadata"

  SQSName:
    Type: String
    Default: "cognito-sqs"

Resources:
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: "user-pool-client"
      UserPoolId: !Ref UserPool

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  SaveUserMetadataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "DynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ChangeMessageVisibility"
                Resource: "*"

  SendSQSMessageLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SQSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSName

  PermissionForEventToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt SaveUserMetadata.Arn
      Action: "lambda:InvokeFunction"
      Principal: "sqs.amazonaws.com"
      SourceArn: !GetAtt SQS.Arn

  SendSQSMessage:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt SendSQSMessageLambdaExecutionRole.Arn
      FunctionName: !Sub "${AWS::StackName}-send"
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def handler(event, context):
            try:
              print(event)
              user_name = event['userName']
              user_email = event['request']['userAttributes']['email']
              user_phone = event['request']['userAttributes']['phone']
              client_id = event['callerContext']['clientId']

              if 'email' in event['request']['userAttributes']:
                event['response']['autoVerifyEmail'] = True

              sqs = boto3.client('sqs')
              response = sqs.send_message(
                  QueueUrl=os.environ['QUEUE_URL'],
                  MessageBody=json.dumps({
                      'user_name': user_name,
                      'user_email': user_email,
                      'user_phone': user_phone,
                      'id': client_id
                  })
              )

              return event

            except Exception as e:
              print(e)
              return str(e)

      Runtime: "python3.8"
      Environment:
        Variables:
          QUEUE_URL: !GetAtt SQS.QueueUrl

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      LambdaConfig:
        PreSignUp: !GetAtt SendSQSMessage.Arn

  CognitoLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SendSQSMessage.Arn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"

  SaveUserMetadata:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt SaveUserMetadataLambdaExecutionRole.Arn
      FunctionName: !Sub "${AWS::StackName}-consumer"
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.client('dynamodb', region_name='us-east-1')

          def handler(event, context):
            try:
              record = event['Records']
              for r in record:
                  body = json.loads(r['body'])
                  print(body)
                  requestBody = {
                      "id": {"S": body['id']},
                      "user_name": {"S": body['user_name']},
                      "user_email": {"S": body['user_email']},
                      "user_phone": {"S": body['user_phone']}
                  }
                  dynamodb.put_item(
                      TableName='user-metadata',
                      Item=json.loads(json.dumps(requestBody))
                  )
              return {
                  "statusCode": 200,
                  "message": "Success!"
              }
            except Exception as e:
                print(e)
                return str(e)

      Runtime: "python3.8"

  LambdaFunctionEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt SQS.Arn
      FunctionName: !GetAtt SaveUserMetadata.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"

  DynamoDBTableName:
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBTableName"

  SQSName:
    Value: !Ref SQS
    Export:
      Name: !Sub "${AWS::StackName}-SQSName"

  SendSQSMessageLambdaArn:
    Value: !GetAtt SendSQSMessage.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SendSQSMessageLambdaArn"
